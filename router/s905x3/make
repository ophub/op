#!/bin/bash

#========================================================================================================================
# https://github.com/ophub/op
# Description: Use Phicomm N1 firmware to build s905x3 related firmware (x96 hk1)
# Function: Use Phicomm N1 firmware to build s905x3 related firmware
# Copyright (C) 2020 https://github.com/ophub/op
#========================================================================================================================
#
# Path: ~/op/router/s905x3/
# ├── flippy
# │   ├── phicomm_n1_firmware_01.img
# │   ├── phicomm_n1_firmware_02.img
# │   ├── phicomm_n1_firmware_more.img
# │   │
# │   └── or phicomm_n1_firmware.zip
# │
# └── make
#
# Usage: Use Ubuntu 18 LTS 64-bit
# 01. Log in to the home directory of the local Ubuntu system
# 02. git clone https://github.com/ophub/op.git
# 03. cd ~/op/router/s905x3/
# 04. Put phicomm_n1_firmware file into ${flippy_folder} (Support putting multiple *.img files into compiling together)
# 05. Run: sudo ./make all (make parameter: all / x96 / hk1)
# 06. The generated files path: ~/op/router/s905x3/${build_save_folder}
# 07. git push to your github
# 08. Github.com Build openwrt: ~/op/.github/workflows/build-openwrt-s905x3.yml
#
# Tips: If run 'sudo ./make all' is 'Command not found'. run: 'sudo chmod +x make'
#
#========================================================================================================================

# Default setting ( Don't modify )
flippy_folder="flippy"
build_tmp_folder="tmp"
boot_tmp=${build_tmp_folder}/boot
root_tmp=${build_tmp_folder}/root
build_save_folder="out"
firmware_list=("x96" "hk1")
convert_firmware=${1}

get_tree_status=$(dpkg --get-selections | grep unzip)
[ $? = 0 ] || sudo apt install unzip

# echo color codes
echo_color() {

    this_color=${1}
        case "${this_color}" in
        red)
            echo -e " \033[1;31m[ ${2} ]\033[0m ${3}"
            echo -e "--------------------------------------------"
            echo -e "Current path -PWD-: [ ${PWD} ]"
            echo -e "Situation -lsblk-: [ $(lsblk) ]"
            echo -e "Directory file list -ls-: [ $(ls .) ]"
            echo -e "--------------------------------------------"
            exit 1
            ;;
        green)
            echo -e " \033[1;32m[ ${2} ]\033[0m ${3}"
            ;;
        yellow)
            echo -e " \033[1;33m[ ${2} ]\033[0m ${3}"
            ;;
        blue)
            echo -e " \033[1;34m[ ${2} ]\033[0m ${3}"
            ;;
        purple)
            echo -e " \033[1;35m[ ${2} ]\033[0m ${3}"
            ;;
        *)
            echo -e " \033[1;30m[ ${2} ]\033[0m ${3}"
            ;;
        esac

}

# Check *.zip files
check_zip_file() {

    if  [  ! -f ${flippy_folder}/*.zip ]; then
        echo_color "red" "(1/6) Error: *${flippy_folder}/*.zip Files does not exist."  "\n \
        Support the use of *.img and *.zip files"
    else
        cd ${flippy_folder} && unzip -o *.zip && sync
        openwrt_zip_name=$( ls *.zip )
        for kernel_folder in $( ls -d */ | head -c-2 ); do
            kernel_version=${kernel_folder%/*}
            cd ${kernel_version} && gzip -df *.img.gz && mv -f *.img ../${kernel_version}.img && sync && cd ../
            echo_color "blue" "(1/6) Get the kernel: ${kernel_version}" "..."
        done

        rm -rf $( find ${PWD}/* -type d ) 2>/dev/null
        rm -rf $( find ${PWD}/* -type f ! -name "*.img" ) 2>/dev/null

        echo_color "green" "(1/6) End check_zip_files" "Use [ ${openwrt_zip_name} ] Convert to [ ${convert_firmware} ]..."
    fi
    cd ../

}

# Check *.img files
check_build_files() {

    flippy_file=${1}
    if  [  ! -f ${flippy_folder}/${flippy_file} ]; then
        echo_color "red" "(2/6) Error: Files does not exist"  "\n \
        Please check if the following one files exist: \n \
        ${flippy_folder}/${flippy_file} "
    else
        echo_color "green" "(2/6) End check_build_files" "Use [ ${flippy_file} ] Convert to [ ${convert_firmware} ]..."
    fi

}

#losetup & mount ${flippy_file}
losetup_mount_img() {

     [ -d ${build_tmp_folder} ] && rm -rf ${build_tmp_folder} 2>/dev/null
     mkdir -p ${boot_tmp} ${root_tmp}

     cp -f ${flippy_folder}/${flippy_file}  ${flippy_folder}/make_${flippy_file} && sync
     chmod -R 777 ${flippy_folder} ${build_tmp_folder}

     lodev=$(losetup -P -f --show ${flippy_folder}/make_${flippy_file})
     [ $lodev ] || echo_color "red" "(3/6) losetup make_${flippy_file} failed!" "..."
     mount ${lodev}p1 ${boot_tmp}
     [ $lodev ] || echo_color "red" "(3/6) mount ${lodev}p1 failed!" "..."
     mount ${lodev}p2 ${root_tmp}
     [ $lodev ] || echo_color "red" "(3/6) mount ${lodev}p2 failed!" "..."

     echo_color "green" "(3/6) End losetup_mount_img" "make_${flippy_file} losetup to ${lodev} ..."

}

#edit uEnv.txt from ${boot_tmp}
edit_uenv() {

  cd ${boot_tmp}

        if [  ! -f "uEnv.txt" ]; then
           echo_color "red" "(4/6) Error: uEnv.txt Files does not exist"  "\n \
           Please check if the following one files exist: \n \
           ${boot_tmp}/uEnv.txt"
        fi
        
        no_firmware=false
        firmware_dtb=${1}
        case "${firmware_dtb}" in
        x96)
            old_x96_dtb="#FDT=\/dtb\/amlogic\/meson-sm1-x96-max-plus-100m.dtb"
            new_x96_dtb="FDT=\/dtb\/amlogic\/meson-sm1-x96-max-plus-100m.dtb"
            sed -i "s/^${old_x96_dtb}/${new_x96_dtb}/g" uEnv.txt
            echo_color "blue" "(4/6) x96: Convert completed" "..."
            ;;
        hk1)
            old_hk1_dtb="#FDT=\/dtb\/amlogic\/meson-sm1-hk1box-vontar-x3.dtb"
            new_hk1_dtb="FDT=\/dtb\/amlogic\/meson-sm1-hk1box-vontar-x3.dtb"
            sed -i "s/^${old_hk1_dtb}/${new_hk1_dtb}/g" uEnv.txt
            echo_color "blue" "(4/6) hk1: Convert completed" "..."
            ;;
        *)
            echo_color "red" "(4/6) Have no this firmware: ${convert_firmware}"  "Please select from this list: [ ${firmware_list[@]} ]"
            no_firmware=ture
            ;;
        esac

        if [ ${no_firmware} = false ]; then
            old_n1_dtb="FDT=\/dtb\/amlogic\/meson-gxl-s905d-phicomm-n1.dtb"
            new_n1_dtb="#FDT=\/dtb\/amlogic\/meson-gxl-s905d-phicomm-n1.dtb"
            sed -i "s/^${old_n1_dtb}/${new_n1_dtb}/g" uEnv.txt
            echo_color "blue" "(4/6) old-phicomm-n1: dtb have close" "..."
        else
            echo_color "red" "(4/6) Error: Did not match the appropriate type" "..."
        fi

     sync

     echo_color "green" "(4/6) End edit_uenv" "For: ${firmware_dtb} ..."

}

#write bootloader
write_bootloader() {

    cd ../../${root_tmp}
    BTLD_BIN="root/hk1box-bootloader.img"
    if [ -f ${BTLD_BIN} ]; then
       mkdir -p lib/u-boot
       cp ${BTLD_BIN} lib/u-boot/
       echo_color "blue" "(5/6) Write bootloader" "[ $(ls lib/u-boot/*.img) ] Can be used for TF card startup."
       dd if=${BTLD_BIN} of=${lodev} bs=1 count=442 conv=fsync 2>/dev/null
       dd if=${BTLD_BIN} of=${lodev} bs=512 skip=1 seek=1 conv=fsync 2>/dev/null
    else
       echo_color "red" "(5/6) Error: bootloader does not exist" "..."
    fi
    cd ../../

    echo_color "green" "(5/6) End write_bootloader" "[ ${BTLD_BIN} ] has been write complete ..."
}

#umount & del losetup
umount_ulosetup() {

     umount -f ${boot_tmp} 2>/dev/null
     umount -f ${root_tmp} 2>/dev/null
     losetup -d ${lodev} 2>/dev/null
     [ $? = 0 ] || echo_color "red" "(6/6) umount ${lodev} failed!" "..."
     
     [ -d ${build_save_folder} ] || mkdir -p ${build_save_folder}
     openwrt_filename=openwrt_${firmware_dtb}_${flippy_file%.*}_$(date +"%Y.%m.%d").img
     cp -f ${flippy_folder}/make_${flippy_file} ${build_save_folder}/${openwrt_filename}
     chmod -R 777 ${build_save_folder}
     echo_color "blue" "(6/6) Convert to ${build_save_folder}/${openwrt_filename}" "..."
     
     sync

     rm -rf  ${build_tmp_folder}  ${flippy_folder}/make_${flippy_file}  2>/dev/null

  echo_color "green" "(6/6) End umount_ulosetup"  "Del: ${lodev} ..."

}

#Parameter validity check
if [[ ! -n "${convert_firmware}" ]]; then echo_color "red" "(0/6) Parameter is empty!" "..."; fi
if [[ ! "${firmware_list[@]}"  =~ "${convert_firmware}" ]] &&  [[ ! "${convert_firmware}" = "all" ]]; then echo_color "red" "(0/6) Parameter error" "..."; fi

# begin run the script
echo_color "purple" "Start convert"  "..."
[ $( ls $flippy_folder/*.zip | wc -l ) -gt 0 ] && check_zip_file || echo_color "green" "(1/6) End check_zip_file" "Have no *.zip Files..."

# Use Phicomm N1 firmware (*.img) to build s905x3 related firmware (x96 hk1)
[ $( ls $flippy_folder/*.img | wc -l ) -eq 0 ] && echo_color "red" "(0/6) Error: *.img Files does not exist!" || {
    for kernel in $( ls $flippy_folder/*.img ); do
        if [ ${convert_firmware} = "all" ];then
              for x in ${firmware_list[@]}; do
              {
                   check_build_files ${kernel#*/}
                   losetup_mount_img
                   edit_uenv ${x}
                   write_bootloader
                   umount_ulosetup
              }
              done
        else
              {
                   check_build_files ${kernel#*/}
                   losetup_mount_img
                   edit_uenv ${convert_firmware}
                   write_bootloader
                   umount_ulosetup
              }
        fi
    done
}

rm -rf  ${flippy_folder}/*  2>/dev/null
echo_color "purple" "Convert completed"  "..."
# end run the script

